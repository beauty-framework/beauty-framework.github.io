"use strict";(self.webpackChunkbeauty_docs=self.webpackChunkbeauty_docs||[]).push([[8112],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},9197:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"JSON-RPC/overview","title":"JSON-RPC Support","description":"This package adds first-class JSON-RPC 2.0 support to the Beauty Framework. It\u2019s perfect for building RPC APIs, microservices, and inter-service communication with a strict protocol and strong typing.","source":"@site/docs/4-JSON-RPC/overview.md","sourceDirName":"4-JSON-RPC","slug":"/JSON-RPC/overview","permalink":"/docs/JSON-RPC/overview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0},"sidebar":"tutorialSidebar","previous":{"title":"Testing (WIP)","permalink":"/docs/Advanced/testing"},"next":{"title":"gRPC Support","permalink":"/docs/gRPC/overview"}}');var t=s(4848),i=s(8453);const o={sidebar_position:0},c="JSON-RPC Support",l={},a=[{value:"Installation",id:"installation",level:2},{value:"Registering Console Commands",id:"registering-console-commands",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Example request to your server",id:"example-request-to-your-server",level:2},{value:"Useful Links",id:"useful-links",level:2},{value:"Why JSON-RPC?",id:"why-json-rpc",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"json-rpc-support",children:"JSON-RPC Support"})}),"\n",(0,t.jsx)(n.p,{children:"This package adds first-class JSON-RPC 2.0 support to the Beauty Framework. It\u2019s perfect for building RPC APIs, microservices, and inter-service communication with a strict protocol and strong typing."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f This is an ",(0,t.jsx)(n.strong,{children:"optional module"}),". You need to install and configure it manually."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"Install the package via Composer:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make composer require beauty-framework/json-rpc\n# Or without Docker\ncomposer require beauty-framework/json-rpc\n"})}),"\n",(0,t.jsx)(n.h2,{id:"registering-console-commands",children:"Registering Console Commands"}),"\n",(0,t.jsx)(n.p,{children:"Add the JSON-RPC commands provider to your CLI config:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"// config/commands.php\nreturn [\n    // ...\n    \\Beauty\\JsonRPC\\Console\\RegisterCommands::commands(),\n];\n"})}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Install the JSON-RPC config:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make beauty jsonrpc:install\n# Or without Docker\n./beauty jsonrpc:install\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This creates ",(0,t.jsx)(n.code,{children:"config/json-rpc.php"})," with handler discovery settings."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Example ",(0,t.jsx)(n.code,{children:"config/json-rpc.php"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\ndeclare(strict_types=1);\n\nreturn [\n    __DIR__ . '/../app/RpcHandlers/**/*.php',\n];\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Register handlers in your worker"})}),"\n",(0,t.jsxs)(n.p,{children:["After initializing your ",(0,t.jsx)(n.code,{children:"$app"})," in ",(0,t.jsx)(n.code,{children:"workers/http-worker.php"}),", add this line to register all discovered handlers:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",metastring:"{5}",children:"$app = (new App(container: $application->containerManager->getContainer()))\n    ->withRouterConfig($application->routerConfig)\n    ->withMiddlewares($application->middlewares);\n\n\\Beauty\\JsonRPC\\JsonRpcServer::setHandlers(require base_path('config/json-rpc.php')); // <-- this is required!\n\nwhile ($psrRequest = $worker->waitRequest()) {\n    // ...\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This is ",(0,t.jsx)(n.strong,{children:"required"})," for all your RpcHandlers to be visible to the JsonRpcServer.\nOtherwise, your methods will not be available!"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Add the base JSON-RPC endpoint:"})}),"\n",(0,t.jsx)(n.p,{children:"Create a controller:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\ndeclare(strict_types=1);\n\nnamespace App\\Controllers;\n\nuse Beauty\\Core\\Router\\Route;\nuse Beauty\\Http\\Enums\\HttpMethodsEnum;\nuse Beauty\\Http\\Request\\HttpRequest;\nuse Beauty\\JsonRPC\\JsonRpcServer;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass RpcController\n{\n    public function __construct(\n        protected JsonRpcServer $rpcServer,\n    ) {}\n\n    #[Route(HttpMethodsEnum::POST, '/rpc')]\n    public function rpc(HttpRequest $request): ResponseInterface\n    {\n        return $this->rpcServer->handle($request);\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will be your unified entrypoint for all JSON-RPC requests (",(0,t.jsx)(n.code,{children:"/rpc"}),")."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Generate your own RPC handler:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make beauty generate:handler TestHandler\n# Or without Docker\n./beauty generate:handler TestHandler\n"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This will create a file at ",(0,t.jsx)(n.code,{children:"app/RpcHandlers/TestHandler.php"})," with a basic handler skeleton."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Define a method with the #[RpcMethod] attribute:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"<?php\ndeclare(strict_types=1);\n\nnamespace App\\RpcHandlers;\n\nuse Beauty\\JsonRPC\\Responses\\RpcResponse;\nuse Beauty\\JsonRPC\\RpcMethod;\nuse Psr\\Http\\Message\\ResponseInterface;\n\nclass TestHandler\n{\n    #[RpcMethod('test.test')]\n    public function test(string $msg, array $names, string|int|null $id = null): ResponseInterface\n    {\n        return new RpcResponse([\n            'msg' => $msg,\n            'names' => $names,\n        ], id: $id);\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Method arguments are automatically mapped from the JSON-RPC ",(0,t.jsx)(n.code,{children:"params"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["An ",(0,t.jsx)(n.code,{children:"id"})," argument (if present) will always receive the request ID (for batch/tracing)."]}),"\n",(0,t.jsxs)(n.li,{children:["You can use DI for services, just typehint the argument (e.g., ",(0,t.jsx)(n.code,{children:"LoggerInterface"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example-request-to-your-server",children:"Example request to your server"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "jsonrpc": "2.0",\n  "method": "test.test",\n  "params": {\n    "msg": "Hello",\n    "names": ["Alice", "Bob"]\n  },\n  "id": 42\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Response:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "jsonrpc": "2.0",\n  "result": {\n    "msg": "Hello",\n    "names": ["Alice", "Bob"]\n  },\n  "id": 42\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"useful-links",children:"Useful Links"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["JSON-RPC 2.0 Spec: ",(0,t.jsx)(n.a,{href:"https://www.jsonrpc.org/specification",children:"https://www.jsonrpc.org/specification"})]}),"\n",(0,t.jsxs)(n.li,{children:["Github: ",(0,t.jsx)(n.a,{href:"https://github.com/beauty-framework/json-rpc",children:"https://github.com/beauty-framework/jsonrpc"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"why-json-rpc",children:"Why JSON-RPC?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"One entrypoint, no route mess"}),"\n",(0,t.jsx)(n.li,{children:"Perfect for microservices, P2P, gRPC-like APIs"}),"\n",(0,t.jsx)(n.li,{children:"Easy to implement batching, DI, versioning"}),"\n",(0,t.jsx)(n.li,{children:"Simple frontend integration (works anywhere)"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);