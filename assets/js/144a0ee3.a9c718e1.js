"use strict";(self.webpackChunkbeauty_docs=self.webpackChunkbeauty_docs||[]).push([[8852],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},9589:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Getting Started/data","title":"Work with Database (Repositories)","description":"Beauty Framework provides a clean and lightweight way to interact with databases through low-level SQL and Repository classes. There is no ORM yet \u2014 instead, we use a powerful interface: Beauty\\\\Database\\\\Connection\\\\ConnectionInterface.","source":"@site/docs/2-Getting Started/data.md","sourceDirName":"2-Getting Started","slug":"/Getting Started/data","permalink":"/docs/Getting Started/data","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Handle Exceptions","permalink":"/docs/Getting Started/exceptions"},"next":{"title":"Business Logic in Services","permalink":"/docs/Getting Started/services"}}');var s=t(4848),r=t(8453);const a={sidebar_position:6},o="Work with Database (Repositories)",c={},l=[{value:"\ud83e\uddf1 Example: UserRepository",id:"-example-userrepository",level:2},{value:"\ud83d\udd0c Interface",id:"-interface",level:3},{value:"\ud83e\uddf0 Implementation",id:"-implementation",level:3},{value:"\ud83e\udde9 Entity Example",id:"-entity-example",level:2},{value:"\ud83e\uddfe Dependency Binding",id:"-dependency-binding",level:2},{value:"\u2699\ufe0f Raw SQL Power",id:"\ufe0f-raw-sql-power",level:2},{value:"\ud83d\udca1 Notes",id:"-notes",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"work-with-database-repositories",children:"Work with Database (Repositories)"})}),"\n",(0,s.jsxs)(n.p,{children:["Beauty Framework provides a clean and lightweight way to interact with databases through low-level SQL and ",(0,s.jsx)(n.strong,{children:"Repository classes"}),". There is ",(0,s.jsx)(n.strong,{children:"no ORM yet"})," \u2014 instead, we use a powerful interface: ",(0,s.jsx)(n.code,{children:"Beauty\\Database\\Connection\\ConnectionInterface"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"\u26a0\ufe0f The ORM is currently under development \u2014 this approach gives you full control in the meantime."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-example-userrepository",children:"\ud83e\uddf1 Example: UserRepository"}),"\n",(0,s.jsxs)(n.p,{children:["You can create repository interfaces and their implementations in ",(0,s.jsx)(n.code,{children:"App\\Repositories\\Contracts"})," and ",(0,s.jsx)(n.code,{children:"App\\Repositories"}),", respectively."]}),"\n",(0,s.jsx)(n.h3,{id:"-interface",children:"\ud83d\udd0c Interface"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"namespace App\\Repositories\\Contracts;\n\nuse App\\DTO\\Auth\\RegisterDTO;\nuse App\\Entities\\User;\n\ninterface UserRepositoryInterface\n{\n    public function findByEmail(string $email): User|null;\n    public function create(RegisterDTO $dto): User;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-implementation",children:"\ud83e\uddf0 Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"namespace App\\Repositories;\n\nuse App\\DTO\\Auth\\RegisterDTO;\nuse App\\Entities\\User;\nuse App\\Repositories\\Contracts\\UserRepositoryInterface;\nuse Beauty\\Database\\Connection\\ConnectionInterface;\nuse PDO;\n\nclass UserRepository implements UserRepositoryInterface\n{\n    public function __construct(\n        private ConnectionInterface $connection,\n    ) {}\n\n    public function findByEmail(string $email): ?User\n    {\n        $stmt = $this->connection->query(\n            'SELECT id, name, email, password, created_at FROM users WHERE email = ? LIMIT 1',\n            [$email]\n        );\n\n        $data = $stmt->fetch(PDO::FETCH_ASSOC);\n\n        return $data ? $this->hydrateUser($data) : null;\n    }\n\n    public function create(RegisterDTO $dto): User\n    {\n        $stmt = $this->connection->query(\n            'INSERT INTO users (name, email, password) VALUES (?, ?, ?) RETURNING id, name, email, password, created_at',\n            [$dto->name, $dto->email, $dto->password]\n        );\n\n        return $this->hydrateUser($stmt->fetch(PDO::FETCH_ASSOC));\n    }\n\n    private function hydrateUser(array $data): User\n    {\n        return new User(\n            id: (int)$data['id'],\n            name: $data['name'],\n            email: $data['email'],\n            password: $data['password'],\n            createdAt: new \\DateTimeImmutable($data['created_at']),\n        );\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-entity-example",children:"\ud83e\udde9 Entity Example"}),"\n",(0,s.jsx)(n.p,{children:"Entities are simple readonly value objects:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"namespace App\\Entities;\n\nfinal readonly class User\n{\n    public function __construct(\n        private int $id,\n        private string $name,\n        private string $email,\n        private string $password,\n        private \\DateTimeImmutable $createdAt,\n    ) {}\n\n    public function getId(): int { return $this->id; }\n    public function getName(): string { return $this->name; }\n    public function getEmail(): string { return $this->email; }\n    public function getCreatedAt(): \\DateTimeImmutable { return $this->createdAt; }\n    public function getPassword(): string { return $this->password; }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-dependency-binding",children:"\ud83e\uddfe Dependency Binding"}),"\n",(0,s.jsxs)(n.p,{children:["To inject repository interfaces, register them in your ",(0,s.jsx)(n.code,{children:"App\\Container\\DI"})," class in method ",(0,s.jsx)(n.code,{children:"configure"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use App\\Repositories\\Contracts\\UserRepositoryInterface;\nuse App\\Repositories\\UserRepository;\n\n$container->bind(UserRepositoryInterface::class, UserRepository::class);\n"})}),"\n",(0,s.jsx)(n.p,{children:"All services and controllers will receive the implementation automatically via DI."}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-raw-sql-power",children:"\u2699\ufe0f Raw SQL Power"}),"\n",(0,s.jsxs)(n.p,{children:["Beauty provides direct database access using ",(0,s.jsx)(n.code,{children:"ConnectionInterface"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function update(string $sql, array $bindings = []): int;\npublic function select(string $sql, array $bindings = []): array;\npublic function transaction(callable $callback): mixed;\n"})}),"\n",(0,s.jsx)(n.p,{children:"You have full control over performance, queries, and batching."}),"\n",(0,s.jsx)(n.h2,{id:"-notes",children:"\ud83d\udca1 Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Repositories encapsulate your data access logic"}),"\n",(0,s.jsx)(n.li,{children:"You can return rich entity objects or DTOs"}),"\n",(0,s.jsx)(n.li,{children:"All queries are safe and parameterized"}),"\n",(0,s.jsx)(n.li,{children:"ORM is in development \u2014 stay tuned"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Use repositories to decouple persistence from business logic and keep your services clean."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);