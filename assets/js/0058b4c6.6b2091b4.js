"use strict";(self.webpackChunkbeauty_docs=self.webpackChunkbeauty_docs||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Installation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation","href":"/docs/Installation/install","docId":"Installation/install","unlisted":false},{"type":"link","label":"xDebug & PhpStorm (Docker)","href":"/docs/Installation/xdebug","docId":"Installation/xdebug","unlisted":false},{"type":"link","label":"Configuration","href":"/docs/Installation/configure","docId":"Installation/configure","unlisted":false},{"type":"category","label":"Configs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Configuration Overview","href":"/docs/Installation/Configs/overview","docId":"Installation/Configs/overview","unlisted":false},{"type":"link","label":"App Configuration (config/app.php)","href":"/docs/Installation/Configs/app","docId":"Installation/Configs/app","unlisted":false},{"type":"link","label":"Cache Configuration (config/cache.php)","href":"/docs/Installation/Configs/cache","docId":"Installation/Configs/cache","unlisted":false},{"type":"link","label":"Database Configuration (config/database.php)","href":"/docs/Installation/Configs/database","docId":"Installation/Configs/database","unlisted":false},{"type":"link","label":"KV Storage Configuration (config/kv-storage.php)","href":"/docs/Installation/Configs/kv","docId":"Installation/Configs/kv","unlisted":false},{"type":"link","label":"Middleware Configuration (config/middlewares.php)","href":"/docs/Installation/Configs/middlewares","docId":"Installation/Configs/middlewares","unlisted":false},{"type":"link","label":"Router Configuration (config/router.php)","href":"/docs/Installation/Configs/router","docId":"Installation/Configs/router","unlisted":false},{"type":"link","label":"Event Listeners Configuration (config/event-listeners.php)","href":"/docs/Installation/Configs/event-listeners","docId":"Installation/Configs/event-listeners","unlisted":false},{"type":"link","label":"Console Commands Configuration (config/commands.php)","href":"/docs/Installation/Configs/commands","docId":"Installation/Configs/commands","unlisted":false},{"type":"link","label":"Dependency Injection Configuration (App\\\\Container\\\\DI)","href":"/docs/Installation/Configs/di","docId":"Installation/Configs/di","unlisted":false}]}]},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Getting Started with Beauty Framework","href":"/docs/Getting Started/introduction","docId":"Getting Started/introduction","unlisted":false},{"type":"link","label":"Define a Route and Controller","href":"/docs/Getting Started/controller","docId":"Getting Started/controller","unlisted":false},{"type":"link","label":"Create a ValidatedRequest","href":"/docs/Getting Started/requests","docId":"Getting Started/requests","unlisted":false},{"type":"link","label":"Create a Custom Response (Resource)","href":"/docs/Getting Started/responses","docId":"Getting Started/responses","unlisted":false},{"type":"link","label":"Add Middleware","href":"/docs/Getting Started/middlewares","docId":"Getting Started/middlewares","unlisted":false},{"type":"link","label":"Handle Exceptions","href":"/docs/Getting Started/exceptions","docId":"Getting Started/exceptions","unlisted":false},{"type":"link","label":"Work with Database (Repositories)","href":"/docs/Getting Started/data","docId":"Getting Started/data","unlisted":false},{"type":"link","label":"Business Logic in Services","href":"/docs/Getting Started/services","docId":"Getting Started/services","unlisted":false},{"type":"link","label":"Wrapping Up","href":"/docs/Getting Started/outro","docId":"Getting Started/outro","unlisted":false}]},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Advanced Topics Overview","href":"/docs/Advanced/overview","docId":"Advanced/overview","unlisted":false},{"type":"link","label":"Events & Listeners","href":"/docs/Advanced/events","docId":"Advanced/events","unlisted":false},{"type":"link","label":"Jobs System","href":"/docs/Advanced/jobs","docId":"Advanced/jobs","unlisted":false},{"type":"link","label":"Cache System","href":"/docs/Advanced/caches","docId":"Advanced/caches","unlisted":false},{"type":"link","label":"Local Process Management","href":"/docs/Advanced/processes","docId":"Advanced/processes","unlisted":false},{"type":"link","label":"Database Access","href":"/docs/Advanced/database","docId":"Advanced/database","unlisted":false},{"type":"link","label":"ORM (WIP)","href":"/docs/Advanced/orm","docId":"Advanced/orm","unlisted":false},{"type":"link","label":"Configuration System","href":"/docs/Advanced/configuration-system","docId":"Advanced/configuration-system","unlisted":false},{"type":"link","label":"CLI & Console Kernel","href":"/docs/Advanced/console","docId":"Advanced/console","unlisted":false},{"type":"link","label":"Security (WIP)","href":"/docs/Advanced/security","docId":"Advanced/security","unlisted":false},{"type":"link","label":"Testing (WIP)","href":"/docs/Advanced/testing","docId":"Advanced/testing","unlisted":false}]},{"type":"category","label":"gRPC","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"gRPC Support","href":"/docs/gRPC/overview","docId":"gRPC/overview","unlisted":false}]}]},"docs":{"Advanced/caches":{"id":"Advanced/caches","title":"Cache System","description":"Beauty Framework provides a fast, PSR-16 compliant cache abstraction layer with support for multiple backends and easy configuration via config/cache.php.","sidebar":"tutorialSidebar"},"Advanced/configuration-system":{"id":"Advanced/configuration-system","title":"Configuration System","description":"Beauty Framework uses a clean and consistent configuration system based on plain PHP arrays. All configuration files live in the config/ directory and are automatically loaded at runtime.","sidebar":"tutorialSidebar"},"Advanced/console":{"id":"Advanced/console","title":"CLI & Console Kernel","description":"Beauty Framework includes a powerful and flexible CLI system for building and running custom console commands.","sidebar":"tutorialSidebar"},"Advanced/database":{"id":"Advanced/database","title":"Database Access","description":"Beauty Framework provides a minimal yet flexible database layer via the beauty-framework/database package.","sidebar":"tutorialSidebar"},"Advanced/events":{"id":"Advanced/events","title":"Events & Listeners","description":"Beauty Framework provides a simple, decoupled event system inspired by PSR-14.","sidebar":"tutorialSidebar"},"Advanced/jobs":{"id":"Advanced/jobs","title":"Jobs System","description":"Beauty Framework supports lightweight and powerful job dispatching, which can be executed immediately or deferred to background workers via RoadRunner.","sidebar":"tutorialSidebar"},"Advanced/orm":{"id":"Advanced/orm","title":"ORM (WIP)","description":"---","sidebar":"tutorialSidebar"},"Advanced/overview":{"id":"Advanced/overview","title":"Advanced Topics Overview","description":"Welcome to the Advanced section of the Beauty Framework documentation. This section dives deeper into the powerful features and internals that allow you to build complex, high-performance applications on top of Beauty.","sidebar":"tutorialSidebar"},"Advanced/processes":{"id":"Advanced/processes","title":"Local Process Management","description":"Beauty Framework provides a lightweight concurrency API out of the box via beauty-framework/parallels, allowing you to run multiple operations in parallel using Fibers (and in the future \u2014 RoadRunner Jobs).","sidebar":"tutorialSidebar"},"Advanced/security":{"id":"Advanced/security","title":"Security (WIP)","description":"---","sidebar":"tutorialSidebar"},"Advanced/testing":{"id":"Advanced/testing","title":"Testing (WIP)","description":"---","sidebar":"tutorialSidebar"},"Getting Started/controller":{"id":"Getting Started/controller","title":"Define a Route and Controller","description":"To create a new controller, use the CLI command:","sidebar":"tutorialSidebar"},"Getting Started/data":{"id":"Getting Started/data","title":"Work with Database (Repositories)","description":"Beauty Framework provides a clean and lightweight way to interact with databases through low-level SQL and Repository classes. There is no ORM yet \u2014 instead, we use a powerful interface: Beauty\\\\Database\\\\Connection\\\\ConnectionInterface.","sidebar":"tutorialSidebar"},"Getting Started/exceptions":{"id":"Getting Started/exceptions","title":"Handle Exceptions","description":"In Beauty Framework, exceptions are the primary way to interrupt the request flow and return error responses. This approach keeps your controller and middleware logic clean while maintaining full control over the HTTP response.","sidebar":"tutorialSidebar"},"Getting Started/introduction":{"id":"Getting Started/introduction","title":"Getting Started with Beauty Framework","description":"Welcome to Beauty Framework, a modern, PSR-compliant foundation for building clean, modular, and high-performance PHP applications.","sidebar":"tutorialSidebar"},"Getting Started/middlewares":{"id":"Getting Started/middlewares","title":"Add Middleware","description":"Middleware in Beauty Framework follow the PSR-15 standard, allowing you to intercept, modify, or block requests before they reach your controller.","sidebar":"tutorialSidebar"},"Getting Started/outro":{"id":"Getting Started/outro","title":"Wrapping Up","description":"You\'ve now seen the fundamentals of working with Beauty Framework:","sidebar":"tutorialSidebar"},"Getting Started/requests":{"id":"Getting Started/requests","title":"Create a ValidatedRequest","description":"To handle incoming input with validation, Beauty Framework provides a ValidatedRequest class that you can extend for custom logic.","sidebar":"tutorialSidebar"},"Getting Started/responses":{"id":"Getting Started/responses","title":"Create a Custom Response (Resource)","description":"In Beauty Framework, you can create structured and reusable response classes by extending AbstractJsonResource. These are helpful when returning data from your API \u2014 such as users, profiles, or any other resource.","sidebar":"tutorialSidebar"},"Getting Started/services":{"id":"Getting Started/services","title":"Business Logic in Services","description":"Beauty Framework encourages keeping your controllers thin and services focused. Services are responsible for encapsulating business logic and can depend on repositories, helpers, loggers, and other components.","sidebar":"tutorialSidebar"},"gRPC/overview":{"id":"gRPC/overview","title":"gRPC Support","description":"The Beauty Framework provides optional support for gRPC services via the beauty-framework/grpc package, built on top of the official RoadRunner gRPC plugin.","sidebar":"tutorialSidebar"},"Installation/Configs/app":{"id":"Installation/Configs/app","title":"App Configuration (config/app.php)","description":"The app.php config file contains general application settings such as environment, name, and debug mode. These values are typically controlled through the .env file.","sidebar":"tutorialSidebar"},"Installation/Configs/cache":{"id":"Installation/Configs/cache","title":"Cache Configuration (config/cache.php)","description":"The cache.php config file defines which caching drivers your application can use. Beauty Framework supports a variety of drivers including Redis, file-based, in-memory, and RoadRunner KV.","sidebar":"tutorialSidebar"},"Installation/Configs/commands":{"id":"Installation/Configs/commands","title":"Console Commands Configuration (config/commands.php)","description":"This file registers all custom CLI commands available to your application.","sidebar":"tutorialSidebar"},"Installation/Configs/database":{"id":"Installation/Configs/database","title":"Database Configuration (config/database.php)","description":"The database.php file defines available database connections and the default one your application should use.","sidebar":"tutorialSidebar"},"Installation/Configs/di":{"id":"Installation/Configs/di","title":"Dependency Injection Configuration (App\\\\Container\\\\DI)","description":"Beauty Framework uses a powerful and flexible DI container built on top of php-di. You can configure your own bindings in the App\\\\Container\\\\DI::configure class.","sidebar":"tutorialSidebar"},"Installation/Configs/event-listeners":{"id":"Installation/Configs/event-listeners","title":"Event Listeners Configuration (config/event-listeners.php)","description":"This file maps events to their respective listeners. The format follows PSR-14 compatible structure.","sidebar":"tutorialSidebar"},"Installation/Configs/kv":{"id":"Installation/Configs/kv","title":"KV Storage Configuration (config/kv-storage.php)","description":"This file defines the default key-value store driver used by components that rely on centralized, non-cache storage.","sidebar":"tutorialSidebar"},"Installation/Configs/middlewares":{"id":"Installation/Configs/middlewares","title":"Middleware Configuration (config/middlewares.php)","description":"This file defines global middleware that will be executed for every request, before reaching your route/controller.","sidebar":"tutorialSidebar"},"Installation/Configs/overview":{"id":"Installation/Configs/overview","title":"Configuration Overview","description":"Beauty Framework provides a clean and structured configuration system based on PHP arrays and .env variables. All configuration files are stored in the config/ directory.","sidebar":"tutorialSidebar"},"Installation/Configs/router":{"id":"Installation/Configs/router","title":"Router Configuration (config/router.php)","description":"This config file defines the directories where your controllers are located. The framework will automatically scan these paths and register routes based on PHP attributes.","sidebar":"tutorialSidebar"},"Installation/configure":{"id":"Installation/configure","title":"Configuration","description":"Beauty Framework uses a simple and flexible configuration system powered by PHP config files and environment variables.","sidebar":"tutorialSidebar"},"Installation/install":{"id":"Installation/install","title":"Installation","description":"Beauty Framework can be installed either via Docker (recommended) or manually using Composer and RoadRunner.","sidebar":"tutorialSidebar"},"Installation/xdebug":{"id":"Installation/xdebug","title":"xDebug & PhpStorm (Docker)","description":"This guide helps you set up xDebug inside a Docker container with PhpStorm for local debugging.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Beauty Framework is a fast, lightweight, and fully modular PHP framework built for modern microservices and APIs. It embraces clean architecture principles and provides a Laravel-like developer experience without the bloat.","sidebar":"tutorialSidebar"}}}}')}}]);