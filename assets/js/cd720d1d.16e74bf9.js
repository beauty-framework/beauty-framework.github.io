"use strict";(self.webpackChunkbeauty_docs=self.webpackChunkbeauty_docs||[]).push([[6837],{3347:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"Installation/Configs/cache","title":"Cache Configuration (config/cache.php)","description":"The cache.php config file defines which caching drivers your application can use. Beauty Framework supports a variety of drivers including Redis, file-based, in-memory, and RoadRunner KV.","source":"@site/docs/1-Installation/Configs/cache.md","sourceDirName":"1-Installation/Configs","slug":"/Installation/Configs/cache","permalink":"/docs/Installation/Configs/cache","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"App Configuration (config/app.php)","permalink":"/docs/Installation/Configs/app"},"next":{"title":"Database Configuration (config/database.php)","permalink":"/docs/Installation/Configs/database"}}');var i=c(4848),a=c(8453);const s={sidebar_position:3},t="Cache Configuration (config/cache.php)",l={},o=[{value:"\ud83d\udd27 Default Driver",id:"-default-driver",level:3},{value:"\ud83d\udce6 Supported Drivers",id:"-supported-drivers",level:3},{value:"\ud83d\ude80 Redis Example",id:"-redis-example",level:3},{value:"\ud83e\uddea Usage Example",id:"-usage-example",level:3},{value:"\ud83d\udd27 Custom Cache Driver",id:"-custom-cache-driver",level:3}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsxs)(n.h1,{id:"cache-configuration-configcachephp",children:["Cache Configuration (",(0,i.jsx)(n.code,{children:"config/cache.php"}),")"]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"cache.php"})," config file defines which caching drivers your application can use. Beauty Framework supports a variety of drivers including Redis, file-based, in-memory, and RoadRunner KV."]}),"\n",(0,i.jsx)(n.h3,{id:"-default-driver",children:"\ud83d\udd27 Default Driver"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"'default' => env('CACHE_DRIVER', 'redis'),\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can switch drivers via the ",(0,i.jsx)(n.code,{children:"CACHE_DRIVER"})," env variable."]}),"\n",(0,i.jsx)(n.h3,{id:"-supported-drivers",children:"\ud83d\udce6 Supported Drivers"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"redis"}),": requires ",(0,i.jsx)(n.code,{children:"ext-redis"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file"}),": stores cache on disk"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"array"}),": non-persistent runtime cache (useful for testing)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"memory"}),": memory-efficient LRU cache with adjustable size"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"roadrunner-kv"}),": uses RR's KV plugin"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"-redis-example",children:"\ud83d\ude80 Redis Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"'redis' => [\n    'driver' => 'redis',\n    'host' => env('REDIS_HOST', '127.0.0.1'),\n    'port' => env('REDIS_PORT', 6379),\n    'database' => env('REDIS_CACHE_DB', 1),\n    'prefix' => env('REDIS_CACHE_PREFIX', 'beauty:cache:'),\n]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-usage-example",children:"\ud83e\uddea Usage Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Psr\\SimpleCache\\CacheInterface;\n\n$cache = container()->get(CacheInterface::class);\n\n$cache->set('key', 'value', 3600);\n$value = $cache->get('key');\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"You can configure multiple stores and use them dynamically within your application."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"-custom-cache-driver",children:"\ud83d\udd27 Custom Cache Driver"}),"\n",(0,i.jsx)(n.p,{children:"Memcached for example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Memcached;\nuse Psr\\SimpleCache\\CacheInterface;\n\nclass Memcache implements CacheInterface\n{\n    public function __construct(private Memcached $memcached) {}\n\n    public function get(string $key, mixed $default = null): mixed {\n        $value = $this->memcached->get($key);\n        return $value === false ? $default : $value;\n    }\n\n    public function set(string $key, mixed $value, $ttl = null): bool {\n        return $this->memcached->set($key, $value, $ttl ?? 0);\n    }\n\n    public function delete(string $key): bool {\n        return $this->memcached->delete($key);\n    }\n\n    public function clear(): bool {\n        return $this->memcached->flush();\n    }\n\n    public function getMultiple(iterable $keys, mixed $default = null): iterable {\n        $results = [];\n        foreach ($keys as $key) {\n            $results[$key] = $this->get($key, $default);\n        }\n        return $results;\n    }\n    public function setMultiple(iterable $values, $ttl = null): bool {\n        foreach ($values as $key => $value) {\n            if (!$this->set($key, $value, $ttl)) return false;\n        }\n        return true;\n    }\n\n    public function deleteMultiple(iterable $keys): bool {\n        foreach ($keys as $key) {\n            if (!$this->delete($key)) return false;\n        }\n        return true;\n    }\n\n    public function has(string $key): bool {\n        return $this->memcached->get($key) !== false;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Beauty\\Cache\\Driver\\CacheDriverInterface;\nuse Psr\\SimpleCache\\CacheInterface;\nuse Memcached;\n\nclass MemcachedCacheDriver implements CacheDriverInterface\n{\n    public function supports(string $driver): bool\n    {\n        return $driver === 'memcached';\n    }\n\n    public function make(array $config): CacheInterface\n    {\n        $memcached = new Memcached();\n        $memcached->addServer($config['host'] ?? '127.0.0.1', $config['port'] ?? 11211);\n\n        return new Memcache($memcached);\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And registry in ",(0,i.jsx)(n.code,{children:"config/cache.php"})," in ",(0,i.jsx)(n.code,{children:"stores"})," section:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"return [\n    'default' => env('CACHE_DRIVER', 'redis'),\n    'stores' => [\n        'memcached' => [\n            'driver' => 'memcached',\n            'host' => env('MEMCACHED_HOST', '127.0.0.1'),\n            'port' => env('MEMCACHED_PORT', 11211),\n        ],\n    ];\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Add ",(0,i.jsx)(n.code,{children:"App\\Container\\Cache"})," in factory:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"        $factory = new CacheFactory([\n            new RedisCacheDriver(),\n            new KVCacheDriver(),\n            new ArrayCacheDriver(),\n            new FileCacheDriver(),\n            new LruCacheDriver(),\n            new MemcachedCacheDriver(), // <- this\n        ]);\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,c)=>{c.d(n,{R:()=>s,x:()=>t});var r=c(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);