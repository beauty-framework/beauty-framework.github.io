"use strict";(self.webpackChunkbeauty_docs=self.webpackChunkbeauty_docs||[]).push([[8975],{6061:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"Getting Started/services","title":"Business Logic in Services","description":"Beauty Framework encourages keeping your controllers thin and services focused. Services are responsible for encapsulating business logic and can depend on repositories, helpers, loggers, and other components.","source":"@site/docs/2-Getting Started/services.md","sourceDirName":"2-Getting Started","slug":"/Getting Started/services","permalink":"/docs/Getting Started/services","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Work with Database (Repositories)","permalink":"/docs/Getting Started/data"},"next":{"title":"Wrapping Up","permalink":"/docs/Getting Started/outro"}}');var s=t(4848),o=t(8453);const i={sidebar_position:7},c="Business Logic in Services",a={},u=[{value:"\ud83e\uddf1 Example: AuthService",id:"-example-authservice",level:2},{value:"\ud83e\uddfe Using a Service in Controller",id:"-using-a-service-in-controller",level:2},{value:"\ud83d\udd39 Method Injection",id:"-method-injection",level:3},{value:"\ud83d\udd39 Constructor Injection",id:"-constructor-injection",level:3},{value:"\ud83e\udde9 Notes",id:"-notes",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"business-logic-in-services",children:"Business Logic in Services"})}),"\n",(0,s.jsxs)(n.p,{children:["Beauty Framework encourages keeping your ",(0,s.jsx)(n.strong,{children:"controllers thin"})," and ",(0,s.jsx)(n.strong,{children:"services focused"}),". Services are responsible for encapsulating business logic and can depend on repositories, helpers, loggers, and other components."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-example-authservice",children:"\ud83e\uddf1 Example: AuthService"}),"\n",(0,s.jsxs)(n.p,{children:["Let's create an ",(0,s.jsx)(n.code,{children:"AuthService"})," that handles user registration and login:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"namespace App\\Services\\Auth;\n\nuse App\\DTO\\Auth\\LoginDTO;\nuse App\\DTO\\Auth\\RegisterDTO;\nuse App\\Entities\\UserToken;\nuse App\\Exceptions\\ServerErrorException;\nuse App\\Jobs\\LogUserJob;\nuse App\\Repositories\\Contracts\\UserRepositoryInterface;\nuse App\\Repositories\\Contracts\\UserTokenRepositoryInterface;\nuse Beauty\\Database\\Connection\\ConnectionInterface;\nuse Beauty\\Database\\Connection\\Exceptions\\QueryException;\nuse Beauty\\Http\\Request\\Exceptions\\ValidationException;\nuse Beauty\\Jobs\\Dispatcher;\nuse Psr\\Log\\LoggerInterface;\nuse Random\\RandomException;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\NativePasswordHasher;\n\nclass AuthService\n{\n    public function __construct(\n        protected NativePasswordHasher $hasher,\n        protected ConnectionInterface $connection,\n        protected UserRepositoryInterface $userRepository,\n        protected UserTokenRepositoryInterface $tokenRepository,\n        protected LoggerInterface $logger,\n        protected Dispatcher $dispatcher,\n    ) {}\n\n    public function login(LoginDTO $dto): UserToken\n    {\n        try {\n            $user = $this->userRepository->findByEmail($dto->email);\n\n            if (!$user || !$this->hasher->verify($user->getPassword(), $dto->password)) {\n                throw new ValidationException('Invalid credentials');\n            }\n\n            return $this->tokenRepository->create($user->getId(), $this->generateToken());\n        } catch (QueryException $e) {\n            $this->logger->error($e->getMessage());\n            throw new ServerErrorException('Server error');\n        }\n    }\n\n    public function register(RegisterDTO $dto): UserToken\n    {\n        try {\n            return $this->connection->transaction(function () use ($dto) {\n                $dto->password = $this->hasher->hash($dto->password);\n\n                $user = $this->userRepository->create($dto);\n                $token = $this->generateToken();\n\n                $userToken = $this->tokenRepository->create($user->getId(), $token);\n                $this->dispatcher->dispatch(new LogUserJob($user->getId(), $user->getEmail()));\n\n                return $userToken;\n            });\n        } catch (QueryException $e) {\n            $this->logger->error($e->getMessage());\n            throw new ServerErrorException('Server error');\n        }\n    }\n\n    protected function generateToken(): string\n    {\n        return bin2hex(random_bytes(32));\n    }\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-using-a-service-in-controller",children:"\ud83e\uddfe Using a Service in Controller"}),"\n",(0,s.jsxs)(n.p,{children:["Services are automatically injected into your controller methods via DI, ",(0,s.jsx)(n.strong,{children:"or via constructor"}),":"]}),"\n",(0,s.jsx)(n.h3,{id:"-method-injection",children:"\ud83d\udd39 Method Injection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use App\\Services\\Auth\\AuthService;\nuse App\\DTO\\Auth\\RegisterDTO;\nuse Beauty\\Http\\Request\\ValidatedRequest;\nuse Beauty\\Http\\Response\\JsonResponse;\nuse Psr\\Http\\Message\\ResponseInterface;\n\n#[Route(HttpMethodsEnum::POST, '/auth/register')]\npublic function register(ValidatedRequest $request, AuthService $service): ResponseInterface\n{\n    $dto = $request->toDto(RegisterDTO::class);\n    $token = $service->register($dto);\n\n    return new JsonResponse(201, [\n        'token' => $token->getToken(),\n        'user_id' => $token->getUser()->getId(),\n    ]);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-constructor-injection",children:"\ud83d\udd39 Constructor Injection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use App\\Services\\Auth\\AuthService;\n\nclass AuthController\n{\n    public function __construct(private AuthService $authService) {}\n\n    #[Route(HttpMethodsEnum::POST, '/auth/register')]\n    public function register(ValidatedRequest $request): ResponseInterface\n    {\n        $dto = $request->toDto(RegisterDTO::class);\n        $token = $this->authService->register($dto);\n\n        return new JsonResponse(201, [\n            'token' => $token->getToken(),\n            'user_id' => $token->getUser()->getId(),\n        ]);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"-notes",children:"\ud83e\udde9 Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Services allow grouping logic and dependencies in a reusable way"}),"\n",(0,s.jsx)(n.li,{children:"You can use services in controllers, jobs, listeners, etc."}),"\n",(0,s.jsx)(n.li,{children:"They are auto-injected from the container"}),"\n",(0,s.jsxs)(n.li,{children:["Transactions are fully supported via ",(0,s.jsx)(n.code,{children:"ConnectionInterface"})]}),"\n",(0,s.jsx)(n.li,{children:"Exception handling should be done inside the service when necessary"}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"Keep controllers small \u2014 let services do the heavy lifting."}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);