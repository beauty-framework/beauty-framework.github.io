"use strict";(self.webpackChunkbeauty_docs=self.webpackChunkbeauty_docs||[]).push([[6864],{6861:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Getting Started/responses","title":"Create a Custom Response (Resource)","description":"In Beauty Framework, you can create structured and reusable response classes by extending AbstractJsonResource. These are helpful when returning data from your API \u2014 such as users, profiles, or any other resource.","source":"@site/docs/2-Getting Started/responses.md","sourceDirName":"2-Getting Started","slug":"/Getting Started/responses","permalink":"/docs/Getting Started/responses","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Create a ValidatedRequest","permalink":"/docs/Getting Started/requests"},"next":{"title":"Add Middleware","permalink":"/docs/Getting Started/middlewares"}}');var t=n(4848),o=n(8453);const a={sidebar_position:3},i="Create a Custom Response (Resource)",c={},l=[{value:"\u2728 Example: UserResponse",id:"-example-userresponse",level:3},{value:"\u2705 Usage in Controller",id:"-usage-in-controller",level:3},{value:"\ud83d\udd27 Custom Headers and Status Codes",id:"-custom-headers-and-status-codes",level:3},{value:"\ud83d\udca1 Notes",id:"-notes",level:3}];function u(e){const s={blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"create-a-custom-response-resource",children:"Create a Custom Response (Resource)"})}),"\n",(0,t.jsxs)(s.p,{children:["In Beauty Framework, you can create structured and reusable response classes by extending ",(0,t.jsx)(s.code,{children:"AbstractJsonResource"}),". These are helpful when returning data from your API \u2014 such as users, profiles, or any other resource."]}),"\n",(0,t.jsxs)(s.p,{children:["A resource implements ",(0,t.jsx)(s.code,{children:"ResponsibleInterface"})," and can be returned directly from a controller. Internally, it will be converted into a proper ",(0,t.jsx)(s.code,{children:"JsonResponse"}),"."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-example-userresponse",children:"\u2728 Example: UserResponse"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-php",children:"namespace App\\Responses\\User;\n\nuse Beauty\\Http\\Response\\AbstractJsonResource;\n\nclass UserResponse extends AbstractJsonResource\n{\n    protected array $fields = ['id', 'name', 'email'];\n\n    public function __construct(\n        public int $id,\n        public string $name,\n        public string $email,\n    ) {}\n\n    // Optional, AbstractJsonResource will auto generate serialized data\n    public function jsonSerialize(): array\n    {\n        return [\n            'id' => $this->id,\n            'name' => $this->name,\n            'email' => $this->email,\n        ];\n    }\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:"This class is used to format the output structure of a single user."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-usage-in-controller",children:"\u2705 Usage in Controller"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-php",children:"use Beauty\\Http\\Response\\Contracts\\ResponsibleInterface;\n\n#[Route(HttpMethodsEnum::GET, '/users')]\npublic function index(HttpRequest $request): ResponseInterface\n{\n    // Example array of User entities\n    return new JsonResponse(200, [\n        'users' => array_map(fn (User $user) => new UserResponse(\n            $user->getId(),\n            $user->getName(),\n            $user->getEmail(),\n        ), $users),\n    ]);\n}\n\n#[Route(HttpMethodsEnum::POST, '/user')]\npublic function store(CreateUserRequest $request): ResponsibleInterface\n{\n    $data = $request->json();\n\n    // Example array of User entities\n    return new UserResponse(\n        $data->getId(),\n        $data->getName(),\n        $user->getEmail(),\n    );\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"-custom-headers-and-status-codes",children:"\ud83d\udd27 Custom Headers and Status Codes"}),"\n",(0,t.jsx)(s.p,{children:"You can configure headers or status code fluently:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-php",children:"return (new UserResponse(...))\n    ->setStatusCode(201)\n    ->setHeader('X-Custom-Header', 'Value');\n"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"-notes",children:"\ud83d\udca1 Notes"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"This approach makes it easy to reuse response formats across multiple controllers"}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"jsonSerialize()"})," gives you full control over output structure"]}),"\n",(0,t.jsxs)(s.li,{children:["You can also return ",(0,t.jsx)(s.code,{children:"AbstractJsonResource"})," directly if your controller allows ",(0,t.jsx)(s.code,{children:"ResponsibleInterface"})," return types"]}),"\n"]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsx)(s.p,{children:"Resource responses help separate transformation logic from business logic \u2014 keeping your controllers clean and predictable."}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>i});var r=n(6540);const t={},o=r.createContext(t);function a(e){const s=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);