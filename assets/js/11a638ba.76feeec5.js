"use strict";(self.webpackChunkbeauty_docs=self.webpackChunkbeauty_docs||[]).push([[9158],{8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},9577:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Advanced/events","title":"Events & Listeners","description":"Beauty Framework provides a simple, decoupled event system inspired by PSR-14.","source":"@site/docs/3-Advanced/events.md","sourceDirName":"3-Advanced","slug":"/Advanced/events","permalink":"/docs/Advanced/events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection (DI)","permalink":"/docs/Advanced/di"},"next":{"title":"Jobs System","permalink":"/docs/Advanced/jobs"}}');var i=s(4848),r=s(8453);const a={sidebar_position:1},c="Events & Listeners",l={},o=[{value:"\u2728 Defining an Event",id:"-defining-an-event",level:2},{value:"\ud83e\udde0 Creating a Listener",id:"-creating-a-listener",level:2},{value:"\ud83d\ude80 Dispatching Events",id:"-dispatching-events",level:2},{value:"\u2699\ufe0f Registering Listeners",id:"\ufe0f-registering-listeners",level:2},{value:"\u2705 Summary",id:"-summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"events--listeners",children:"Events & Listeners"})}),"\n",(0,i.jsx)(n.p,{children:"Beauty Framework provides a simple, decoupled event system inspired by PSR-14.\nIt allows you to dispatch events and register listeners that will react to them.\nThis is useful for handling side effects such as logging, email notifications, statistics, etc."}),"\n",(0,i.jsx)(n.h2,{id:"-defining-an-event",children:"\u2728 Defining an Event"}),"\n",(0,i.jsx)(n.p,{children:"An event is just a simple class with public properties:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"namespace App\\Events;\n\nclass SaveTaskInLogEvent\n{\n    public function __construct(\n        public int $todoId,\n        public int $userId,\n        public string $message,\n    ) {}\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can generate an event using the CLI:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make beauty generate:event SaveTaskInLogEvent\n# or without Docker\n./beauty generate:event SaveTaskInLogEvent\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-creating-a-listener",children:"\ud83e\udde0 Creating a Listener"}),"\n",(0,i.jsxs)(n.p,{children:["A listener is a class with a ",(0,i.jsx)(n.code,{children:"handle()"})," method that receives the event as an argument.\nDependencies are injected automatically:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"namespace App\\Listeners;\n\nuse App\\Events\\SaveTaskInLogEvent;\nuse App\\Services\\Todo\\TaskLogsService;\nuse Psr\\Log\\LoggerInterface;\nuse Beauty\\Database\\Connection\\Exceptions\\QueryException;\nuse DateMalformedStringException;\n\nclass TaskLogInDBListener\n{\n    public function __construct(\n        private TaskLogsService $taskLogsService,\n        private LoggerInterface $logger,\n    ) {}\n\n    public function handle(SaveTaskInLogEvent $event): void\n    {\n        try {\n            $taskLog = $this->taskLogsService->save(\n                $event->todoId,\n                $event->userId,\n                $event->message\n            );\n\n            $this->logger->info('Task log created', [\n                'id' => $taskLog->getId(),\n                'todo_id' => $taskLog->getTodoId(),\n            ]);\n        } catch (QueryException|DateMalformedStringException $exception) {\n            $this->logger->error('Create task log error: ' . $exception->getMessage());\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can generate a listener using the CLI:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"make beauty generate:listener TaskLogInDBListener\n# or without Docker\n./beauty generate:listener TaskLogInDBListener\n"})}),"\n",(0,i.jsx)(n.h2,{id:"-dispatching-events",children:"\ud83d\ude80 Dispatching Events"}),"\n",(0,i.jsxs)(n.p,{children:["To dispatch an event, inject ",(0,i.jsx)(n.code,{children:"EventDispatcherInterface"})," and call ",(0,i.jsx)(n.code,{children:"dispatch()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use App\\Events\\SaveTaskInLogEvent;\nuse Psr\\EventDispatcher\\EventDispatcherInterface;\n\nclass SomeService\n{\n    public function __construct(\n        protected EventDispatcherInterface $eventDispatcher,\n    ) {}\n\n    public function runLogic(): void\n    {\n        $this->eventDispatcher->dispatch(\n            new SaveTaskInLogEvent(1, 42, 'Task created')\n        );\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ufe0f-registering-listeners",children:"\u2699\ufe0f Registering Listeners"}),"\n",(0,i.jsxs)(n.p,{children:["Listeners are registered in your project in ",(0,i.jsx)(n.code,{children:"config/event-listeners.php"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"<?php\ndeclare(strict_types=1);\n\n/**\n * @var array<class-string, class-string[]>\n */\nreturn [\n    \\App\\Events\\SaveTaskInLogEvent::class => [\n        \\App\\Listeners\\TaskLogInDBListener::class,\n    ],\n];\n"})}),"\n",(0,i.jsx)(n.p,{children:"Beauty will automatically load this configuration during bootstrap."}),"\n",(0,i.jsx)(n.h2,{id:"-summary",children:"\u2705 Summary"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Events are simple data classes"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Listeners handle logic, dependencies are injected"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Register your listeners in ",(0,i.jsx)(n.code,{children:"config/event-listeners.php"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Easily dispatch events to trigger logic decoupled from the main flow"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Generate boilerplate with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"make beauty generate:event YourEvent"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"make beauty generate:listener YourListener"})}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);